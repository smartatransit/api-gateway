// Code generated by counterfeiter. DO NOT EDIT.
package jwtfakes

import (
	"context"
	"sync"

	"github.com/smartatransit/api-gateway/jwt"
)

type FakeParser struct {
	ParseTokenStub        func(context.Context, string) (jwt.Authorization, error)
	parseTokenMutex       sync.RWMutex
	parseTokenArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	parseTokenReturns struct {
		result1 jwt.Authorization
		result2 error
	}
	parseTokenReturnsOnCall map[int]struct {
		result1 jwt.Authorization
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeParser) ParseToken(arg1 context.Context, arg2 string) (jwt.Authorization, error) {
	fake.parseTokenMutex.Lock()
	ret, specificReturn := fake.parseTokenReturnsOnCall[len(fake.parseTokenArgsForCall)]
	fake.parseTokenArgsForCall = append(fake.parseTokenArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ParseToken", []interface{}{arg1, arg2})
	fake.parseTokenMutex.Unlock()
	if fake.ParseTokenStub != nil {
		return fake.ParseTokenStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.parseTokenReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeParser) ParseTokenCallCount() int {
	fake.parseTokenMutex.RLock()
	defer fake.parseTokenMutex.RUnlock()
	return len(fake.parseTokenArgsForCall)
}

func (fake *FakeParser) ParseTokenCalls(stub func(context.Context, string) (jwt.Authorization, error)) {
	fake.parseTokenMutex.Lock()
	defer fake.parseTokenMutex.Unlock()
	fake.ParseTokenStub = stub
}

func (fake *FakeParser) ParseTokenArgsForCall(i int) (context.Context, string) {
	fake.parseTokenMutex.RLock()
	defer fake.parseTokenMutex.RUnlock()
	argsForCall := fake.parseTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeParser) ParseTokenReturns(result1 jwt.Authorization, result2 error) {
	fake.parseTokenMutex.Lock()
	defer fake.parseTokenMutex.Unlock()
	fake.ParseTokenStub = nil
	fake.parseTokenReturns = struct {
		result1 jwt.Authorization
		result2 error
	}{result1, result2}
}

func (fake *FakeParser) ParseTokenReturnsOnCall(i int, result1 jwt.Authorization, result2 error) {
	fake.parseTokenMutex.Lock()
	defer fake.parseTokenMutex.Unlock()
	fake.ParseTokenStub = nil
	if fake.parseTokenReturnsOnCall == nil {
		fake.parseTokenReturnsOnCall = make(map[int]struct {
			result1 jwt.Authorization
			result2 error
		})
	}
	fake.parseTokenReturnsOnCall[i] = struct {
		result1 jwt.Authorization
		result2 error
	}{result1, result2}
}

func (fake *FakeParser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.parseTokenMutex.RLock()
	defer fake.parseTokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeParser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ jwt.Parser = new(FakeParser)
