// Code generated by counterfeiter. DO NOT EDIT.
package jwtfakes

import (
	"context"
	"sync"
	"time"

	"github.com/smartatransit/api-gateway/jwt"
)

type FakeTokenCache struct {
	AddTokenStub        func(context.Context, string, time.Time)
	addTokenMutex       sync.RWMutex
	addTokenArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 time.Time
	}
	CleanStub        func(context.Context)
	cleanMutex       sync.RWMutex
	cleanArgsForCall []struct {
		arg1 context.Context
	}
	FetchTokenStub        func(context.Context, string) (string, bool)
	fetchTokenMutex       sync.RWMutex
	fetchTokenArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	fetchTokenReturns struct {
		result1 string
		result2 bool
	}
	fetchTokenReturnsOnCall map[int]struct {
		result1 string
		result2 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTokenCache) AddToken(arg1 context.Context, arg2 string, arg3 time.Time) {
	fake.addTokenMutex.Lock()
	fake.addTokenArgsForCall = append(fake.addTokenArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 time.Time
	}{arg1, arg2, arg3})
	fake.recordInvocation("AddToken", []interface{}{arg1, arg2, arg3})
	fake.addTokenMutex.Unlock()
	if fake.AddTokenStub != nil {
		fake.AddTokenStub(arg1, arg2, arg3)
	}
}

func (fake *FakeTokenCache) AddTokenCallCount() int {
	fake.addTokenMutex.RLock()
	defer fake.addTokenMutex.RUnlock()
	return len(fake.addTokenArgsForCall)
}

func (fake *FakeTokenCache) AddTokenCalls(stub func(context.Context, string, time.Time)) {
	fake.addTokenMutex.Lock()
	defer fake.addTokenMutex.Unlock()
	fake.AddTokenStub = stub
}

func (fake *FakeTokenCache) AddTokenArgsForCall(i int) (context.Context, string, time.Time) {
	fake.addTokenMutex.RLock()
	defer fake.addTokenMutex.RUnlock()
	argsForCall := fake.addTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeTokenCache) Clean(arg1 context.Context) {
	fake.cleanMutex.Lock()
	fake.cleanArgsForCall = append(fake.cleanArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("Clean", []interface{}{arg1})
	fake.cleanMutex.Unlock()
	if fake.CleanStub != nil {
		fake.CleanStub(arg1)
	}
}

func (fake *FakeTokenCache) CleanCallCount() int {
	fake.cleanMutex.RLock()
	defer fake.cleanMutex.RUnlock()
	return len(fake.cleanArgsForCall)
}

func (fake *FakeTokenCache) CleanCalls(stub func(context.Context)) {
	fake.cleanMutex.Lock()
	defer fake.cleanMutex.Unlock()
	fake.CleanStub = stub
}

func (fake *FakeTokenCache) CleanArgsForCall(i int) context.Context {
	fake.cleanMutex.RLock()
	defer fake.cleanMutex.RUnlock()
	argsForCall := fake.cleanArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTokenCache) FetchToken(arg1 context.Context, arg2 string) (string, bool) {
	fake.fetchTokenMutex.Lock()
	ret, specificReturn := fake.fetchTokenReturnsOnCall[len(fake.fetchTokenArgsForCall)]
	fake.fetchTokenArgsForCall = append(fake.fetchTokenArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("FetchToken", []interface{}{arg1, arg2})
	fake.fetchTokenMutex.Unlock()
	if fake.FetchTokenStub != nil {
		return fake.FetchTokenStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.fetchTokenReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTokenCache) FetchTokenCallCount() int {
	fake.fetchTokenMutex.RLock()
	defer fake.fetchTokenMutex.RUnlock()
	return len(fake.fetchTokenArgsForCall)
}

func (fake *FakeTokenCache) FetchTokenCalls(stub func(context.Context, string) (string, bool)) {
	fake.fetchTokenMutex.Lock()
	defer fake.fetchTokenMutex.Unlock()
	fake.FetchTokenStub = stub
}

func (fake *FakeTokenCache) FetchTokenArgsForCall(i int) (context.Context, string) {
	fake.fetchTokenMutex.RLock()
	defer fake.fetchTokenMutex.RUnlock()
	argsForCall := fake.fetchTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTokenCache) FetchTokenReturns(result1 string, result2 bool) {
	fake.fetchTokenMutex.Lock()
	defer fake.fetchTokenMutex.Unlock()
	fake.FetchTokenStub = nil
	fake.fetchTokenReturns = struct {
		result1 string
		result2 bool
	}{result1, result2}
}

func (fake *FakeTokenCache) FetchTokenReturnsOnCall(i int, result1 string, result2 bool) {
	fake.fetchTokenMutex.Lock()
	defer fake.fetchTokenMutex.Unlock()
	fake.FetchTokenStub = nil
	if fake.fetchTokenReturnsOnCall == nil {
		fake.fetchTokenReturnsOnCall = make(map[int]struct {
			result1 string
			result2 bool
		})
	}
	fake.fetchTokenReturnsOnCall[i] = struct {
		result1 string
		result2 bool
	}{result1, result2}
}

func (fake *FakeTokenCache) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addTokenMutex.RLock()
	defer fake.addTokenMutex.RUnlock()
	fake.cleanMutex.RLock()
	defer fake.cleanMutex.RUnlock()
	fake.fetchTokenMutex.RLock()
	defer fake.fetchTokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTokenCache) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ jwt.TokenCache = new(FakeTokenCache)
